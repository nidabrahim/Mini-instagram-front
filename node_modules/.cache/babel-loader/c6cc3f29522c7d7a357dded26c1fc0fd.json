{"ast":null,"code":"import _classCallCheck from \"/home/youssef/ISIMA/projects/ReactJS/InstaFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/youssef/ISIMA/projects/ReactJS/InstaFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/youssef/ISIMA/projects/ReactJS/InstaFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/youssef/ISIMA/projects/ReactJS/InstaFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/youssef/ISIMA/projects/ReactJS/InstaFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/youssef/ISIMA/projects/ReactJS/InstaFront/src/components/postForm.jsx\";\nimport React, { Component } from 'react';\nimport { FormGroup, ControlLabel, FormControl, Button } from 'react-bootstrap';\nimport API from '../api';\nimport MyUploader from './myUploader';\nimport { UserConsumer } from './../providers/userProvider';\nimport 'react-images-uploader/styles.css';\nimport 'react-images-uploader/font.css';\n\nvar PostForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostForm, _React$Component);\n\n  function PostForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      title: '',\n      description: '',\n      author: _this.props.author,\n      file: '',\n      imagePreviewUrl: ''\n    };\n\n    _this.handleChange = function (event) {\n      var target = event.target;\n\n      if (target.type === 'text') {\n        _this.setState({\n          title: event.target.value\n        });\n      } else if (target.type === 'textarea') {\n        _this.setState({\n          description: event.target.value\n        });\n      }\n\n      if (target.files) {\n        var reader = new FileReader();\n        var file = target.files[0];\n        reader.readAsDataURL(file);\n\n        reader.onload = function (event) {\n          console.log(event.target.result);\n\n          _this.setState({\n            file: file,\n            imagePreviewUrl: reader.result\n          });\n        };\n      }\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n      var access_token = localStorage.getItem(\"token\");\n      var config = {\n        headers: {\n          Authorization: access_token,\n          'Content-Type': 'application/json'\n        }\n      };\n      var fd = new FormData();\n      fd.append('photo', _this.state.file, _this.state.file.name);\n      API.post('post/photo', fd, config).then(function (res) {\n        var post = {\n          title: _this.state.title,\n          description: _this.state.description,\n          hidden: false,\n          author: _this.state.author,\n          img: res.data.filename\n        };\n        console.log(post);\n        API.post('post/add', post, config).then(function (result) {\n          _this.props.onHide();\n\n          console.log(result.data);\n          var post = result.data.post;\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PostForm, [{\n    key: \"getValidationState\",\n    value: function getValidationState() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var imagePreviewUrl = this.state.imagePreviewUrl;\n      var $imagePreview = null;\n\n      if (imagePreviewUrl) {\n        $imagePreview = React.createElement(\"img\", {\n          src: imagePreviewUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        });\n      } else {\n        $imagePreview = React.createElement(\"div\", {\n          className: \"previewText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        controlId: \"formBasicText\",\n        validationState: this.getValidationState(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Title\"), React.createElement(FormControl, {\n        type: \"text\",\n        value: this.state.value,\n        placeholder: \"Enter title\",\n        name: \"title\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        controlId: \"formControlsTextarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Description\"), React.createElement(FormControl, {\n        componentClass: \"textarea\",\n        value: this.state.value,\n        placeholder: \"Enter description\",\n        name: \"description\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"previewComponent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"fileInput\",\n        type: \"file\",\n        name: \"file\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"imgPreview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, $imagePreview)), React.createElement(\"button\", {\n        className: \"submitButton btn btn-outline btn-xl js-scroll-trigger\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Add post\")));\n    }\n  }]);\n\n  return PostForm;\n}(React.Component);\n\nvar ConnectedPostForm = function ConnectedPostForm(props) {\n  return React.createElement(UserConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, function (_ref) {\n    var user = _ref.user,\n        posts = _ref.posts;\n    return React.createElement(PostForm, Object.assign({}, props, {\n      author: user,\n      posts: posts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default ConnectedPostForm;","map":{"version":3,"sources":["/home/youssef/ISIMA/projects/ReactJS/InstaFront/src/components/postForm.jsx"],"names":["React","Component","FormGroup","ControlLabel","FormControl","Button","API","MyUploader","UserConsumer","PostForm","state","title","description","author","props","file","imagePreviewUrl","handleChange","event","target","type","setState","value","files","reader","FileReader","readAsDataURL","onload","console","log","result","handleSubmit","preventDefault","access_token","localStorage","getItem","config","headers","Authorization","fd","FormData","append","name","post","then","res","hidden","img","data","filename","onHide","catch","error","$imagePreview","getValidationState","ConnectedPostForm","user","posts"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FormGroup, ControlLabel, FormControl, Button } from 'react-bootstrap';\nimport API from '../api';\nimport MyUploader from './myUploader'\nimport { UserConsumer } from './../providers/userProvider'\nimport 'react-images-uploader/styles.css';\nimport 'react-images-uploader/font.css';\n\nclass PostForm extends React.Component {\n\n  state = {\n    title: '',\n    description: '',\n    author: this.props.author,\n\n    file: '',\n    imagePreviewUrl: ''\n  }\n\n  getValidationState(){\n    \n  }\n\n  handleChange = event => {\n   \n    const target = event.target;\n\n    if(target.type === 'text'){\n      this.setState({ title: event.target.value });\n    }\n    else if(target.type === 'textarea'){\n      this.setState({ description: event.target.value });\n    }\n\n    if(target.files){\n      let reader = new FileReader();\n      let file = target.files[0];\n      reader.readAsDataURL(file)\n\n      reader.onload = (event) => {\n          console.log(event.target.result);\n          this.setState({\n              file: file,\n              imagePreviewUrl: reader.result\n          });\n      }\n    }\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const access_token = localStorage.getItem(\"token\");\n\n    const config = {\n      headers: {\n        Authorization: access_token,\n        'Content-Type': 'application/json'\n      }\n    }\n\n    const fd = new FormData();\n    fd.append('photo', this.state.file, this.state.file.name);\n\n    API.post('post/photo', fd, config)\n    .then(res => {\n\n        const post = {\n          title: this.state.title,\n          description: this.state.description,\n          hidden: false,\n          author: this.state.author,\n          img: res.data.filename\n        };\n\n        console.log(post);\n\n        API.post('post/add', post, config)\n        .then(result => {\n          this.props.onHide();\n          console.log(result.data);\n          const post = result.data.post;\n          \n        })\n        .catch((error) => {\n          console.log(error);\n        })\n    })\n    .catch((error) => {\n        console.log(error);\n    })\n\n  }\n\n  render() {\n\n    let {imagePreviewUrl} = this.state;\n    let $imagePreview = null;\n    if (imagePreviewUrl) {\n      $imagePreview = (<img src={imagePreviewUrl} />);\n    } else {\n      $imagePreview = (<div className=\"previewText\"></div>);\n    }\n\n    return (\n      <div>\n\n        <form onSubmit={this.handleSubmit}>\n\n          <FormGroup controlId=\"formBasicText\" validationState={this.getValidationState()} >\n            <ControlLabel>Title</ControlLabel>\n            <FormControl\n              type=\"text\"\n              value={this.state.value}\n              placeholder=\"Enter title\"\n              name=\"title\"\n              onChange={this.handleChange} />\n            <FormControl.Feedback />\n          </FormGroup>\n\n          <FormGroup controlId=\"formControlsTextarea\">\n            <ControlLabel>Description</ControlLabel>\n            <FormControl \n              componentClass=\"textarea\" \n              value={this.state.value} \n              placeholder=\"Enter description\" \n              name=\"description\" \n              onChange={this.handleChange} />\n            </FormGroup>\n\n          {/* <MyUploader/> */}\n          <div className=\"previewComponent\">\n\n            <div>\n              <input className=\"fileInput\" \n                type=\"file\" name=\"file\"\n                onChange={this.handleChange} />\n            </div>\n\n            <div className=\"imgPreview\">\n              {$imagePreview}\n            </div>\n\n          </div>\n\n          <button className=\"submitButton btn btn-outline btn-xl js-scroll-trigger\" type=\"submit\">Add post</button>\n\n        </form>\n\n      </div>\n    )\n  }\n\n}\n\nconst ConnectedPostForm = props => (\n  <UserConsumer>\n    {({ user, posts }) => (\n      <PostForm\n        {...props}\n        author={user}\n        posts={posts}\n      />\n    )}\n  </UserConsumer>\n)\nexport default ConnectedPostForm"]},"metadata":{},"sourceType":"module"}