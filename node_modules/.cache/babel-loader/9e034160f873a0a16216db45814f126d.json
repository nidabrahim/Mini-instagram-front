{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isString_1 = require(\"./isString\");\n\nvar isBlob_1 = require(\"./isBlob\");\n\nvar isFile_1 = require(\"./isFile\");\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\n\n\nexports.loadString = function (src, cb) {\n  return src ? cb(null, {\n    src: src\n  }) : cb(new Error(\"src is empty\"));\n};\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\n\n\nexports.loadFile = function (file, cb) {\n  var reader = new FileReader();\n\n  reader.onload = function (evt) {\n    cb(null, {\n      src: reader.result,\n      alt: file.name\n    });\n  };\n\n  reader.onerror = function (evt) {\n    return cb(reader.error);\n  };\n\n  reader.readAsDataURL(file);\n};\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\n\n\nexports.loadBlob = function (blob, cb) {\n  try {\n    var src_1 = URL.createObjectURL(blob);\n\n    var done = function done() {\n      return URL.revokeObjectURL(src_1);\n    };\n\n    cb(null, {\n      src: src_1\n    }, done);\n  } catch (err) {\n    return cb(err);\n  }\n};\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n *\n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\n\n\nexports.loadAnything = function (prop, cb) {\n  return isString_1.isString(prop) ? exports.loadString(prop, cb) : isBlob_1.isBlob(prop) ? exports.loadBlob(prop, cb) : isFile_1.isFile(prop) ? exports.loadFile(prop, cb) : cb(new Error(\"prop `\" + prop + \"` is not a valid loadable object\"));\n};\n\nexports.default = exports.loadAnything;","map":null,"metadata":{},"sourceType":"script"}