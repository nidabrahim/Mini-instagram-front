{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"react\");\n\nvar loadImageProps_1 = require(\"./loadImageProps\");\n\nvar isDefined_1 = require(\"./isDefined\");\n\nvar constants_1 = require(\"./constants\");\n\nvar transparentGIF_1 = require(\"./transparentGIF\");\n\nvar ImageTemplate_1 = require(\"./ImageTemplate\");\n/**\n * Chooses a different src string depending on\n * the status provided.\n * That is, returns the loadingURL src if the status is\n * `LOADING`, the errorURL src if the status is `ERROR`,\n * the emptyURL src if the status is `EMPTY`, and the\n * default src for any other status\n * @param status the status, `LOADING`, `ERROR`, `EMPTY` or `DONE`\n * @param src the default src string, to be used on DONE status, or if other URLS are not available\n * @param urls an object of three urls, loadingURL,errorURL,emptyURL, all optional\n */\n\n\nexports.getSRC = function (status, src, props) {\n  if (!props) {\n    return src || '';\n  }\n\n  ;\n  var loadingURL = props.loadingURL,\n      errorURL = props.errorURL,\n      emptyURL = props.emptyURL;\n  var ret = status === constants_1.LOADING && loadingURL ? loadingURL : status === constants_1.ERROR && errorURL ? errorURL : status === constants_1.EMPTY && emptyURL ? emptyURL : src || '';\n  return ret;\n};\n/**\n * Returns the status\n * @param props\n */\n\n\nexports.getStatus = function (props) {\n  return props.status || constants_1.DONE;\n};\n/**\n * returns the crop type\n * @param props\n */\n\n\nexports.getCrop = function (props) {\n  return props && props.crop ? props.crop : 'contain';\n};\n/**\n * Returns a data-x string, where 'x' is the status\n * useful for css targeting\n * @param status the status of the image loader\n */\n\n\nexports.statusAsAttr = function (status) {\n  return \"data-status-\" + (status || 'unknown').toLowerCase();\n};\n\nvar ImageLoader =\n/** @class */\nfunction (_super) {\n  __extends(ImageLoader, _super);\n\n  function ImageLoader(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    ;\n    _this.state = {\n      src: transparentGIF_1.transparentGIF,\n      alt: '',\n      status: constants_1.EMPTY,\n      width: 0,\n      height: 0\n    };\n    return _this;\n  }\n\n  ;\n\n  ImageLoader.prototype.load = function (props) {\n    var _this = this;\n\n    this.setState({\n      status: constants_1.LOADING\n    });\n    ;\n    loadImageProps_1.loadImageProps(props, function (error, _a) {\n      var src = _a.src,\n          alt = _a.alt,\n          width = _a.width,\n          height = _a.height;\n      return error ? _this.setState({\n        status: constants_1.ERROR,\n        error: error\n      }) : _this.setState({\n        status: constants_1.DONE,\n        src: src,\n        alt: alt,\n        width: width,\n        height: height\n      });\n    });\n  };\n\n  ;\n\n  ImageLoader.prototype.componentDidMount = function () {\n    if (this.props.file) {\n      this.load(this.props.file);\n    }\n  };\n\n  ;\n\n  ImageLoader.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.file !== this.props.file) {\n      if (nextProps.file) {\n        this.load(nextProps.file);\n      } else if (nextProps.file == null) {\n        this.setState({\n          src: transparentGIF_1.transparentGIF\n        });\n      }\n    }\n  };\n\n  ;\n\n  ImageLoader.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    return isDefined_1.isDefined(nextProps.file) && nextProps.file !== this.props.file || isDefined_1.isDefined(nextProps.alt) && nextProps.alt !== this.props.alt || isDefined_1.isDefined(nextProps.template) && nextProps.template !== this.props.template || nextState.src !== this.state.src;\n  };\n\n  ;\n\n  ImageLoader.prototype.render = function () {\n    var _a = this.state,\n        src = _a.src,\n        imgWidth = _a.width,\n        imgHeight = _a.height;\n    var _b = this.props,\n        template = _b.template,\n        width = _b.width,\n        height = _b.height,\n        className = _b.className;\n    var alt = this.props.alt || this.state.alt || '';\n    ;\n    var crop = exports.getCrop(this.props);\n    var status = exports.getStatus(this.state);\n    var statusAttr = exports.statusAsAttr(status);\n\n    var props = __assign({}, this.props, {\n      src: exports.getSRC(status, src, this.props),\n      alt: alt,\n      width: width,\n      height: height,\n      imgWidth: imgWidth,\n      imgHeight: imgHeight,\n      crop: crop,\n      status: status,\n      statusAttr: statusAttr,\n      className: className\n    });\n\n    return React.createElement(template, props);\n  };\n\n  ImageLoader.defaultProps = {\n    template: ImageTemplate_1.ImageTemplate,\n    crop: 'contain',\n    emptyURL: transparentGIF_1.transparentGIF\n  };\n  return ImageLoader;\n}(react_1.Component);\n\nexports.ImageLoader = ImageLoader;\nexports.default = ImageLoader;","map":null,"metadata":{},"sourceType":"script"}